extends typescript

snippet comp "Vue component"
<template>
</template>

<script lang="ts">
import { defineComponent, reactive } from '@vue/composition-api'

type State = {}

export default defineComponent({
	name: '$1',

	${2:components: {
	},}

	${3:props: {
	},}

	${4:emits: [],}

	setup(props, ctx) {
		const state = reactive<State>({})
		$0

		return {
			state,
		}
	}
})
</script>

${5:<style lang="stylus" scoped>
</style>}
endsnippet

snippet comp3 "Vue 3 component"
<template>
	$1
</template>

<script lang="ts" setup>
type State = {}

const props = defineProps<{
	$2
}>()

const emits = defineEmits<[$3]>()

const state = reactive<{
	$4
}>($5)

$2
</script>

${5:<style lang="stylus" scoped>
</style>}
endsnippet

snippet ref "Vue3 ref" b
const $1 = ref<$2>($3)
$0
endsnippet

snippet cmpt "Vue3 computed" b
const $1 = computed(() => $2)
$0
endsnippet

snippet watch "watch()" b
watch($1, ${2: async }${3:()} => {
	${0: console.log("$1:", $1)}
}, { immediate: true })
endsnippet

snippet we "watchEffect()" b
watchEffect(() => {
	console.log('$1:', $1)
})
endsnippet

